import { CONFIG } from './Config.js';
import { MapGenerator } from '../map/MapGenerator.js';
import { ItemPlacer } from '../utils/ItemPlacer.js';
import { Renderer } from '../rendering/Renderer.js';
import { InputHandler } from '../utils/InputHandler.js';
import { Helpers } from '../utils/helpers.js';

export class Game {
    constructor() {
        this.config = CONFIG;
        this.map = [];
        this.hero = null;
        this.enemies = [];
        this.swords = [];
        this.potions = [];
        
        this.mapGenerator = new MapGenerator(this.config);
        this.itemPlacer = new ItemPlacer(this.config);
        this.renderer = new Renderer(this.config);
        this.inputHandler = new InputHandler();
        
        this.moveInterval = null;
        this.isGameOver = false;
        
        console.log('üéÆ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    init() {
       
        this.generateMap();
        this.placeItems();
        this.setupControls();
        this.startEnemyMovement();
        this.render();
      
    }

    generateMap() {  
        this.map = this.mapGenerator.generateConnectedMap();
    }

    placeItems() {
        const items = this.itemPlacer.placeItems(this.map);
        this.hero = items.hero;
        this.enemies = items.enemies;
        this.swords = items.swords;
        this.potions = items.potions;
    }

    setupControls() {
        this.inputHandler.bind(this);
    }

    startEnemyMovement() {
        this.moveInterval = setInterval(() => {
            if (!this.isGameOver) {
                this.moveEnemies();
                this.enemiesAttack();
                this.render();
            }
        }, this.config.ENEMY_MOVE_INTERVAL);
    }

    stopEnemyMovement() {
        if (this.moveInterval) {
            clearInterval(this.moveInterval);
            this.moveInterval = null;
        }
    }

    moveHero(dx, dy) {
        if (this.isGameOver) return;
        if (this.hero.move(dx, dy, this.map)) {
            this.checkInteractions();
            this.render();
        }
    }

    checkInteractions() {
        this.checkSwordPickup();
        this.checkPotionPickup();
        this.checkEnemyStep();
    }

    checkSwordPickup() {
        const swordIndex = this.swords.findIndex(s => s.x === this.hero.x && s.y === this.hero.y);
        if (swordIndex !== -1) {
            const sword = this.swords[swordIndex];
            const oldAttack = this.hero.attackPower;
            console.log(`‚öîÔ∏è –ü–æ–¥–æ–±—Ä–∞–Ω –º–µ—á –≤ (${sword.x}, ${sword.y})! –ê—Ç–∞–∫–∞: ${oldAttack} ‚Üí ${oldAttack + this.config.SWORD_BONUS}`);
            this.swords.splice(swordIndex, 1);
            this.hero.increaseAttack(this.config.SWORD_BONUS);
        }
    }

    checkPotionPickup() {
        const potionIndex = this.potions.findIndex(p => p.x === this.hero.x && p.y === this.hero.y);
        if (potionIndex !== -1) {
            const potion = this.potions[potionIndex];
            const oldHealth = this.hero.health;
            const newHealth = Math.min(this.hero.maxHealth, oldHealth + this.config.POTION_HEAL);
            console.log(`üß™ –ü–æ–¥–æ–±—Ä–∞–Ω–æ –∑–µ–ª—å–µ –≤ (${potion.x}, ${potion.y})! –ó–¥–æ—Ä–æ–≤—å–µ: ${oldHealth}/${this.hero.maxHealth} ‚Üí ${newHealth}/${this.hero.maxHealth}`);
            this.potions.splice(potionIndex, 1);
            this.hero.heal(this.config.POTION_HEAL);
        }
    }

    checkEnemyStep() {
        const enemyIndex = this.enemies.findIndex(e => e.x === this.hero.x && e.y === this.hero.y);
        if (enemyIndex !== -1) {
            const enemy = this.enemies[enemyIndex];
            const oldHealth = this.hero.health;
            const damage = enemy.attackPower;
            const newHealth = Math.max(0, oldHealth - damage);
            console.log(`üí• –ì–µ—Ä–æ–π –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–∞ –≤—Ä–∞–≥–∞ –≤ (${enemy.x}, ${enemy.y})! –ü–æ–ª—É—á–µ–Ω–æ ${damage} —É—Ä–æ–Ω–∞: ${oldHealth} ‚Üí ${newHealth}`);
            if (this.hero.takeDamage(enemy.attackPower)) {
                this.gameOver();
            }
        }
    }

    attack() {
        if (this.isGameOver) return;
        const directions = [{ x: -1, y: 0 }, { x: 1, y: 0 }, { x: 0, y: -1 }, { x: 0, y: 1 }];
        let hit = false;

        directions.forEach(dir => {
            const ex = this.hero.x + dir.x;
            const ey = this.hero.y + dir.y;

            const enemyIndex = this.enemies.findIndex(e => e.x === ex && e.y === ey);
            if (enemyIndex !== -1) {
                hit = this.attackEnemy(enemyIndex) || hit;
            }
        });

        if (hit) {
            this.render();
        }
    }

    attackEnemy(enemyIndex) {
        const enemy = this.enemies[enemyIndex];
        const oldHealth = enemy.health;
        const damage = this.hero.attackPower;
        const newHealth = Math.max(0, oldHealth - damage);
        console.log(`‚öîÔ∏è –ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞ –≤ (${enemy.x}, ${enemy.y}) —Å —É—Ä–æ–Ω–æ–º ${damage}: ${oldHealth} ‚Üí ${newHealth}`);
        if (enemy.takeDamage(this.hero.attackPower)) {
            console.log(`üíÄ –í—Ä–∞–≥ –ø–æ–±–µ–∂–¥–µ–Ω –≤ (${enemy.x}, ${enemy.y})!`);
            this.enemies.splice(enemyIndex, 1);
            this.checkVictory();
        }
        return true;
    }

    moveEnemies() {
        // console.log('üëπ –î–≤–∏–∂–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤...'); // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞
        this.enemies.forEach(enemy => {
            if (Math.random() > this.config.ENEMY_MOVE_CHANCE) {
                this.moveEnemy(enemy);
            }
        });
    }

    moveEnemy(enemy) {
        const directions = [{ x: 0, y: -1 }, { x: 0, y: 1 }, { x: -1, y: 0 }, { x: 1, y: 0 }];
        const validMoves = directions.filter(dir => {
            const newX = enemy.x + dir.x;
            const newY = enemy.y + dir.y;
            
            return this.isValidMove(newX, newY) && 
                   !this.isCellOccupied(newX, newY, enemy);
        });
        
        if (validMoves.length > 0) {
            const move = validMoves[Math.floor(Math.random() * validMoves.length)];
            enemy.x += move.x;
            enemy.y += move.y;
        }
    }

    isValidMove(x, y) {
        return x >= 0 && x < this.config.WIDTH &&
               y >= 0 && y < this.config.HEIGHT &&
               this.map[y][x] === 0;
    }

    isCellOccupied(x, y, excludeEntity = null) {
        const entities = [
            this.hero,
            ...this.enemies,
            ...this.swords,
            ...this.potions
        ];
        
        return Helpers.isCellOccupied(x, y, entities, excludeEntity);
    }

    enemiesAttack() {
        this.enemies.forEach(enemy => {
            if (enemy.getDistanceTo(this.hero.x, this.hero.y) === 1) {
                const oldHealth = this.hero.health;
                const damage = enemy.attackPower;
                const newHealth = Math.max(0, oldHealth - damage);
                console.log(`üëπ –í—Ä–∞–≥ –≤ (${enemy.x}, ${enemy.y}) –∞—Ç–∞–∫—É–µ—Ç –≥–µ—Ä–æ—è –Ω–∞ ${damage} —É—Ä–æ–Ω–∞: ${oldHealth} ‚Üí ${newHealth}`);
                if (this.hero.takeDamage(enemy.attackPower)) {
                    this.gameOver();
                }
            }
        });
    }

    gameOver() {
        this.isGameOver = true;
        this.stopEnemyMovement();
        this.inputHandler.unbind();
        console.log(`üíÄ –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê: –ì–µ—Ä–æ–π –ø–æ–≥–∏–±! –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - HP: 0/${this.hero.maxHealth}, –ê–¢–ö: ${this.hero.attackPower}`);
        this.renderer.showMessage("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ì–µ—Ä–æ–π –ø–æ–≥–∏–±.");
    }

    checkVictory() {
        if (this.enemies.length === 0) {
            this.isGameOver = true;
            this.stopEnemyMovement();
            this.inputHandler.unbind();
            console.log(`üéâ –ü–û–ë–ï–î–ê: –í—Å–µ –≤—Ä–∞–≥–∏ –ø–æ–±–µ–∂–¥–µ–Ω—ã! –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - HP: ${this.hero.health}/${this.hero.maxHealth}, –ê–¢–ö: ${this.hero.attackPower}`);
            this.renderer.showMessage("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –í—Å–µ –≤—Ä–∞–≥–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã.");
            return true;
        }
        return false;
    }

    render() {
        this.renderer.render({
            map: this.map,
            hero: this.hero,
            enemies: this.enemies,
            swords: this.swords,
            potions: this.potions
        });
    }

    getGameState() {
        return {
            map: this.map,
            hero: this.hero,
            enemies: this.enemies,
            swords: this.swords,
            potions: this.potions
        };
    }
}